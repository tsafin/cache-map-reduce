<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MR.Sample.WordCount.AppWorkers">
<Description>
Version #2 More advanced, multiple-workers "map-reduce" example.
BEWARE! 
There is no intermediate controlling node before reducer, because MR.Emitter.Sorted 
is automagically reduce and sort key values set to the single node because of using hierarchical 
global array. </Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63687,11970.26054</TimeCreated>

<Method name="Map">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName:%String,InfraPipeName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim inputFile As MR.Input.FileLines        = ##class(MR.Input.FileLines).%New(FileName)
    #dim mapper As MR.Sample.WordCount.Mapper   = ##class(MR.Sample.WordCount.Mapper).%New()
    #dim infraPipe As MR.Sample.GlobalPipeClone = ##class(MR.Sample.GlobalPipeClone).%New(InfraPipeName)

    while 'inputFile.IsAtEnd() {
        do mapper.Map(inputFile, infraPipe)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="MapReduce">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
    new

    #dim infraPipe As MR.Sample.GlobalPipe    = ##class(MR.Sample.GlobalPipe).%New($name(^mtemp.Map($J)))
    #dim outPipe As MR.Base.Emitter           = ##class(MR.Emitter.Sorted).%New($name(^mtemp.Reduce($J)))
    #dim reducer As MR.Sample.WordCount.Adder = ##class(MR.Sample.WordCount.Adder).%New()

    #dim sc As %Status = $$$OK
    // do $system.WorkMgr.StopWorkers()
    // Set ^||%ISC.WorkQueueMgr("ForceJobs")=job
    #dim queue As %SYSTEM.WorkMgr = $system.WorkMgr.Initialize("/multicompile=1", .sc) 
    quit:$$$ISERR(sc)

    for i=1:1 {
        #dim fileName As %String = $piece($Text(DATA+i),";",3)
        quit:fileName=""

        //do ..Map(fileName, infraPipe)
        set sc = queue.Queue("##class(MR.Sample.WordCount.AppWorkers).Map", fileName, infraPipe.GlobalName)
        quit:$$$ISERR(sc)

        //do infraPipe.Dump()

    }
    set sc = queue.WaitForComplete()  quit:$$$ISERR(sc)

    while 'infraPipe.IsAtEnd() {
        do reducer.Reduce(infraPipe, outPipe)
    }
    do outPipe.Dump()

    quit
    
DATA
    ;;C:\Users\Timur\Documents\Intersystems\src\work\mapreduce\data\war_an_peace_vol1.txt
    ;;C:\Users\Timur\Documents\Intersystems\src\work\mapreduce\data\war_an_peace_vol2.txt
    ;;C:\Users\Timur\Documents\Intersystems\src\work\mapreduce\data\war_an_peace_vol3.txt
    ;;C:\Users\Timur\Documents\Intersystems\src\work\mapreduce\data\war_an_peace_vol4.txt
    ;;
    ;;C:\Users\Timur\Documents\Intersystems\src\work\mapreduce\data\single-line.txt
    ;;C:\Users\Timur\Documents\Intersystems\src\work\mapreduce\data\multiple-lines.txt
]]></Implementation>
</Method>
</Class>
</Export>
