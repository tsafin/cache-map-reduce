<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MR.Sample.AgeAverage.AppWorkers">
<Description>
Very simple, multiple-threaded "map-reduce" example.
Version #2 - trying to do "select age, agv(contacts) goup by age" via Map-Reduce and workers</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63703,60580.457687</TimeCreated>

<Parameter name="NUMBEROFWORKERS">
<Default>10</Default>
</Parameter>

<Method name="Map">
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String,globalLow:%Integer,globalHigh:%Integer,infraPipeName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim inputGbl As MR.Input.GlobalBounds      = ##class(MR.Input.GlobalBounds).%New(globalName, globalLow, globalHigh)
    #dim mapper As MR.Sample.AgeAverage.Counter = ##class(MR.Sample.AgeAverage.Counter).%New()
    #dim infraPipe As MR.Sample.GlobalPipeClone = ##class(MR.Sample.GlobalPipeClone).%New(infraPipeName)

    while 'inputGbl.IsAtEnd() {
        do mapper.Map(inputGbl, infraPipe)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="MapReduce">
<ClassMethod>1</ClassMethod>
<FormalSpec>populateN:%Numeric=0</FormalSpec>
<Implementation><![CDATA[
    if populateN {
        do ##class(MR.Sample.AgeAverage.Person).%DeleteExtent()
        do ##class(MR.Sample.AgeAverage.Person).Populate(populateN)
    }
    #dim globalName As %String      = $name(^MR.Sample.PersonD)
    #dim globalLow As %Integer      = $order(@globalName@(""))
    #dim globalHigh As %Integer     = $order(@globalName@(""),-1)
    $$$ThrowOnError(globalLow < globalHigh)

    #dim sc As %Status = $$$OK
    do $system.WorkMgr.StopWorkers()
    Set ^||%ISC.WorkQueueMgr("ForceJobs") = ..#NUMBEROFWORKERS
    #dim queue As %SYSTEM.WorkMgr = $system.WorkMgr.Initialize("/multicompile=1", .sc) 
    quit:$$$ISERR(sc)

    #dim infraPipe As MR.Sample.GlobalPipe       = ##class(MR.Sample.GlobalPipe).%New($name(^mtemp.Map($J)))
    #dim outPipe As MR.Base.Emitter              = ##class(MR.Emitter.Sorted).%New($name(^mtemp.Reduce($J)))
    #dim reducer As MR.Sample.AgeAverage.Reducer = ##class(MR.Sample.AgeAverage.Reducer).%New()

    #dim regionSize As %Integer = ((globalHigh - globalLow) \ ..#NUMBEROFWORKERS)

    for i=1:1:..#NUMBEROFWORKERS {
        //do ..Map(globalName, globalLow, globalHigh, infraPipe)
        #dim regionLow As %Integer = regionSize*(i-1) + globalLow
        #dim regionHigh As %Integer = $select(i=..#NUMBEROFWORKERS:globalHigh, 1:regionSize*i + globalLow - 1)
        //write i,?8,"[",regionLow,",",regionHigh,")",!
        set sc = queue.Queue("##class(MR.Sample.AgeAverage.AppWorkers).Map", globalName, regionLow, regionHigh, infraPipe.GlobalName)
        quit:$$$ISERR(sc)
        //do infraPipe.Dump()
    }
    set sc = queue.WaitForComplete()  quit:$$$ISERR(sc)

    while 'infraPipe.IsAtEnd() {
        do reducer.Reduce(infraPipe, outPipe)
    }
    do outPipe.Dump()

    quit
]]></Implementation>
</Method>
</Class>
</Export>
